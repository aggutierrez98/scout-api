generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       Int     @id @default(autoincrement())
  uuid     String  @unique @db.VarChar(10)
  username String  @unique @db.VarChar(20)
  password String
  role     Role    @default(EXTERNO)
  active   Boolean @default(true)
  scout    Scout   @relation(fields: [scoutId], references: [uuid])
  scoutId  String  @unique @db.VarChar(10)
}

model Scout {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique @db.VarChar(10)
  nombre                String                @db.VarChar(45)
  apellido              String                @db.VarChar(45)
  fechaNacimiento       DateTime              @db.Date()
  dni                   String                @unique @db.VarChar(20)
  sexo                  Sexo
  localidad             String                @db.VarChar(45)
  direccion             String                @db.VarChar(65)
  telefono              String?               @db.VarChar(25)
  mail                  String?               @db.VarChar(50)
  progresionActual      Progresion?
  religion              Religion?             @default(CATOLICA)
  patrulla              Patrulla?             @relation(fields: [patrullaId], references: [uuid])
  patrullaId            String?               @db.VarChar(10)
  funcion               Funcion?              @default(JOVEN)
  estado                Estado?               @default(ACTIVO)
  documentosPresentados DocumentoPresentado[]
  entregasObtenidas     EntregaRealizada[]
  familiarScout         FamiliarScout[]
  pagosRealizados       Pago[]
  fechaCreacion         DateTime              @default(now())
  fechaActualizacion    DateTime              @updatedAt
  user                  User?

  @@index([patrullaId])
}

model Documento {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @db.VarChar(10)
  nombre              String                @db.VarChar(45)
  vence               Boolean               @db.Bit(1)
  documentoPresentado DocumentoPresentado[]
}

model DocumentoPresentado {
  id                Int       @id @default(autoincrement())
  uuid              String    @unique @db.VarChar(10)
  documento         Documento @relation(fields: [documentoId], references: [uuid])
  documentoId       String    @db.VarChar(10)
  scout             Scout     @relation(fields: [scoutId], references: [uuid])
  scoutId           String    @db.VarChar(10)
  fechaPresentacion DateTime  @db.Date()

  @@index([scoutId, documentoId])
  @@index([documentoId])
}

model Pago {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique @db.VarChar(10)
  concepto      String      @db.VarChar(100)
  monto         Decimal     @db.Decimal(10, 2)
  rendido       Boolean     @default(false)
  metodoPago    MetodosPago
  scout         Scout       @relation(fields: [scoutId], references: [uuid])
  scoutId       String      @db.VarChar(10)
  fechaPago     DateTime    @db.Date()
  fechaCreacion DateTime    @default(now())

  @@index([scoutId])
}

model Familiar {
  id                 Int             @id @default(autoincrement())
  uuid               String          @unique @db.VarChar(10)
  nombre             String          @db.VarChar(45)
  apellido           String          @db.VarChar(45)
  fechaNacimiento    DateTime        @db.Date()
  dni                String          @db.VarChar(20)
  sexo               Sexo
  localidad          String          @db.VarChar(45)
  direccion          String          @db.VarChar(65)
  mail               String?         @db.VarChar(50)
  telefono           String?         @db.VarChar(25)
  estadoCivil        EstadoCivil?
  fechaCreacion      DateTime        @default(now())
  fechaActualizacion DateTime        @updatedAt
  padreScout         FamiliarScout[]
}

model FamiliarScout {
  id         Int                   @id @default(autoincrement())
  familiar   Familiar              @relation(fields: [familiarId], references: [uuid])
  familiarId String                @db.VarChar(10)
  scout      Scout                 @relation(fields: [scoutId], references: [uuid])
  scoutId    String                @db.VarChar(10)
  relacion   RelacionFamiliarScout

  @@index([scoutId, familiarId])
  @@index([familiarId])
}

model Patrulla {
  id                 Int      @id @default(autoincrement())
  uuid               String   @unique @db.VarChar(10)
  nombre             String   @db.VarChar(45)
  lema               String?  @db.VarChar(100)
  fechaCreacion      DateTime @default(now())
  fechaActualizacion DateTime @updatedAt
  scout              Scout[]
}

model EntregaRealizada {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique @db.VarChar(10)
  scout         Scout       @relation(fields: [scoutId], references: [uuid])
  scoutId       String      @db.VarChar(10)
  tipoEntrega   TipoEntrega
  fechaEntrega  DateTime    @db.Date()
  fechaCreacion DateTime    @default(now())

  @@index([scoutId])
}

enum RelacionFamiliarScout {
  PADRE
  MADRE
  TIO
  TIA
  HERMANO
  HERMANA
  ABUELO
  ABUELA
  OTRO
}

enum Progresion {
  INTERRAMA
  PISTA
  RUMBO
  TRAVESIA
}

enum EstadoCivil {
  SOLTERO
  CASADO
  SEPARADO
  VIUDO
}

enum Funcion {
  JOVEN
  JEFE
  SUBJEFE
  AYUDANTE
  COLABORADOR
}

enum TipoEntrega {
  UNIFORME
  GUIA
  SUBGUIA
  PROGPISTA
  PROGRUMBO
  PROGTRAVESIA
  PROMESA
  SUPERACION
  ESPNATURALEZA
  ESPARTE
  ESPSERVICIO
  ESPESPIRITUALIDAD
  ESPDEPORTES
  ESPCIENCIA
}

enum Sexo {
  M
  F
}

enum Religion {
  CATOLICA
  JUDIA
  BUDISTA
  EVANGELICA
}

enum MetodosPago {
  EFECTIVO
  TRANSFERENCIA
  OTRO
}

enum Role {
  ADMIN
  JEFE
  EDUCADOR
  COLABORADOR
  EXTERNO
}

enum Estado {
  ACTIVO
  INACTIVO
}
